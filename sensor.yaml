  - platform: plex
    host: localhost

  - platform: xbox_live
    api_key: !secret xbox_live_key
    xuid: 
      - !secret xbox_live_xuid
    scan_interval: 300

  - platform: plex_recently_added
    name: Recently-added Movies
    host: localhost
    token: !secret plex_recent_token
    section_types:
    - movie
    max: 15

  - platform: plex_recently_added
    name: Recently-added TV
    host: localhost
    token: !secret plex_recent_token
    section_types:
    - show
    max: 15

  - platform: garbage_collection
    name: trash
    frequency: "weekly"
    collection_days: "fri"

  - platform: garbage_collection
    name: recycling
    frequency: "odd-weeks"
    collection_days: "fri"

  - platform: google_travel_time
    name: Darren -> Home
    api_key: !secret google_map_key
    origin: person.darren
    destination: zone.home
    scan_interval: 3600

  - platform: google_travel_time
    name: Darren -> Work
    api_key: !secret google_map_key
    origin: person.darren
    destination: !secret darren_work
    scan_interval: 3600

  - platform: google_travel_time
    name: Lindsay -> Home
    api_key: !secret google_map_key
    origin: person.lindsay
    destination: zone.home
    scan_interval: 3600

  - platform: google_travel_time
    name: Lindsay -> Work
    api_key: !secret google_map_key
    origin: person.lindsay
    destination: !secret lindsay_work
    scan_interval: 3600

  - platform: google_travel_time
    name: Lindsay -> Gymnastics
    api_key: !secret google_map_key
    origin: person.lindsay
    destination: zone.gymnastics
    scan_interval: 3600

  - platform: template
    sensors:
      harmony_activity:
        value_template: >
          {% if is_state("remote.living_room", 'on') %}
            {{ states.remote.living_room.attributes.current_activity }}
          {% else %}
            PowerOff
          {% endif %}
        friendly_name: Harmony Status
      plex_now_playing:
        value_template: >
          {% if (is_state('media_player.plex_fire_tv', 'playing') or is_state('media_player.plex_fire_tv', 'paused')) %}
            {% if is_state_attr('media_player.plex_fire_tv', 'media_content_type', 'music') %}
              {{ state_attr('media_player.plex_fire_tv', 'session_username') }} {{ states('media_player.plex_fire_tv') }} {{ state_attr('media_player.plex_fire_tv', 'media_artist') }} - {{ state_attr('media_player.plex_fire_tv', 'media_title') }} (From {{ state_attr('media_player.plex_fire_tv', 'media_album_name') }})
            {% elif is_state_attr('media_player.plex_fire_tv', 'media_content_type', 'tvshow') %}
              {{ state_attr('media_player.plex_fire_tv', 'session_username') }} {{ states('media_player.plex_fire_tv') }} {{ state_attr('media_player.plex_fire_tv', 'media_series_title') }} S{{ state_attr('media_player.plex_fire_tv', 'media_season') }}E{{ state_attr('media_player.plex_fire_tv', 'media_episode') }} - {{ state_attr('media_player.plex_fire_tv', 'media_title') }} (From {{ state_attr('media_player.plex_fire_tv', 'media_library_name') }})
            {% elif is_state_attr('media_player.plex_fire_tv', 'media_content_type', 'movie') %}
              {{ state_attr('media_player.plex_fire_tv', 'session_username') }} {{ states('media_player.plex_fire_tv') }} {{ state_attr('media_player.plex_fire_tv', 'media_title') }} (From {{ state_attr('media_player.plex_fire_tv', 'media_library_name') }})
            {% else %}
              {{ state_attr('media_player.plex_fire_tv', 'session_username') }} {{ states('media_player.plex_fire_tv') }} unknown: {{ state_attr('media_player.plex_fire_tv', 'media_title') }}
            {% endif %}
          {% else %}
            Idle
          {% endif %}
        friendly_name: Plex (Now Playing)
      trash_pickup:
        value_template: >
          {{ state_attr("sensor.trash","next_date") | as_timestamp |  timestamp_custom("%b %d")  }} ({{ state_attr("sensor.trash","days") }} days)
        icon_template: "{{state_attr('sensor.trash','icon')}}"
      recycling_pickup:
        value_template: >
          {{ state_attr("sensor.recycling","next_date") | as_timestamp |  timestamp_custom("%b %d")  }} ({{ state_attr("sensor.recycling","days") }} days)
        icon_template: "{{state_attr('sensor.recycling','icon')}}"
      ams_day:
        value_template: >
          {{ (states("input_number.ams_counter") | int) % 6 + 1}}
        friendly_name: AMS Day

